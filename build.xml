<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project default="build_jar" name="Create all Jars for Project JsonReader">
	<loadfile property="version" srcFile="build.version" failonerror="false" />
	<property name="version" value="noVersion" />

	<property name="projectsPath" value="${user.home}/git" />
	<echo message="projectsPath: ${projectsPath}" />

	<property name="buildPath" value="build" />
	<echo message="buildPath: ${buildPath}" />

	<target name="build_jar" depends="cleanup_before, create_jar, test, cleanup_after" />

	<target name="cleanup_before">
		<mkdir dir="${buildPath}" />

		<delete includeEmptyDirs="true">
			<fileset dir="${buildPath}">
				<include name="*" />
			</fileset>
		</delete>

		<mkdir dir="${buildPath}/bin" />
		<mkdir dir="${buildPath}/testbin" />
	</target>
	
	<target name="download_dependencies">
		<mkdir dir="lib_test/" />
		<delete includeEmptyDirs="true">
			<fileset dir="lib_test/">
				<include name="*" />
			</fileset>
		</delete>
		
		<get src="https://repo1.maven.org/maven2/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar" dest="lib_test/" />
		<get src="https://repo1.maven.org/maven2/org/hamcrest/hamcrest-core/2.2/hamcrest-core-2.2.jar" dest="lib_test/" />
		<get src="https://repo1.maven.org/maven2/junit/junit/4.13.2/junit-4.13.2.jar" dest="lib_test/" />
	</target>

	<target name="create_jar" depends="cleanup_before, download_dependencies">
		<javac debug="true" nowarn="true" deprecation="false" destdir="${buildPath}/bin" fork="yes" source="1.8" target="1.8" srcdir="src/main/java" includeantruntime="false" encoding="UTF-8">
			<compilerarg value="-Xlint:unchecked" />
			<compilerarg value="-parameters" />
		</javac>
		
		<copy todir="${buildPath}/bin">
			<fileset dir="src/main/resources" />
		</copy>

		<jar destfile="${buildPath}/json-${version}.jar">
			<manifest>
				<attribute name="Version" value="${version}" />
			</manifest>

			<fileset dir="${buildPath}/bin" />

			<fileset dir="" includes="LICENSE.txt"/>
		</jar>
		<checksum file="${buildPath}/json-${version}.jar" fileext=".md5" forceOverwrite="yes" />
		<checksum file="${buildPath}/json-${version}.jar" algorithm="SHA-1" fileext=".sha1" forceOverwrite="yes" />

		<jar destfile="${buildPath}/json-${version}_sources.jar">
			<manifest>
				<attribute name="Version" value="${version}" />
			</manifest>

			<fileset dir="src/main/java" includes="**/*.java"/>

			<fileset dir="" includes="LICENSE.txt"/>
		</jar>
		<checksum file="${buildPath}/json-${version}_sources.jar" fileext=".md5" forceOverwrite="yes"/>
		<checksum file="${buildPath}/json-${version}_sources.jar" algorithm="SHA-1" fileext=".sha1" forceOverwrite="yes" />
	</target>

	<target name="test" depends="create_jar">
		<path id="test.build.classpath">
			<fileset dir="lib_test">
				<include name="*.jar" />
			</fileset>
			<fileset dir="${buildPath}">
				<include name="*.jar" />
			</fileset>
		</path>

		<javac debug="true" nowarn="true" deprecation="false" destdir="${buildPath}/testbin" fork="yes" source="1.8" target="1.8" srcdir="src/test/java" includeantruntime="false" encoding="UTF-8">
			<classpath refid="test.build.classpath" />
			<compilerarg value="-Xlint:unchecked" />
			<compilerarg value="-parameters" />
		</javac>

		<copy todir="${buildPath}/testbin">
			<fileset dir="src/test/resources" />
		</copy>

		<path id="test.classpath">
			<fileset dir="lib_test">
				<include name="*.jar" />
			</fileset>
			<fileset dir="${buildPath}">
				<include name="*.jar" />
			</fileset>
			<dirset dir="${buildPath}">
				<include name="testbin" />
			</dirset>
		</path>

		<delete dir="test-results" />
		<mkdir dir="test-results" />
		<junit printsummary="yes" haltonfailure="yes">
			<classpath refid="test.classpath" />
			<batchtest todir="test-results">
				<formatter type="xml" usefile="true"/>
				<fileset dir="src/test/java">
					<include name="**/*Test.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<target name="cleanup_after" depends="create_jar, test">
		<delete dir="${buildPath}/bin" />
		<delete dir="${buildPath}/testbin" />

		<delete includeEmptyDirs="true">
			<fileset dir="${buildPath}">
				<include name="TEST-*" />
			</fileset>
		</delete>
	</target>
</project>
